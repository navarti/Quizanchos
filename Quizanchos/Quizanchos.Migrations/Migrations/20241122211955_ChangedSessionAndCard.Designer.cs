// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quizanchos.Domain;

#nullable disable

namespace Quizanchos.Migrations.Migrations
{
    [DbContext(typeof(QuizDbContext))]
    [Migration("20241122211955_ChangedSessionAndCard")]
    partial class ChangedSessionAndCard
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Quizanchos.Domain.Entities.Abstractions.FeatureAbstract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<Guid>("QuizCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuizEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizCategoryId");

                    b.HasIndex("QuizEntityId");

                    b.ToTable("FeatureAbstract");

                    b.HasDiscriminator().HasValue("FeatureAbstract");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Quizanchos.Domain.Entities.Abstractions.QuizCardAbstract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CardIndex")
                        .HasColumnType("int");

                    b.Property<int>("CorrectOption")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<int?>("OptionPicked")
                        .HasColumnType("int");

                    b.Property<Guid?>("SingleGameSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SingleGameSessionId");

                    b.ToTable("QuizCardAbstract");

                    b.HasDiscriminator().HasValue("QuizCardAbstract");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Quizanchos.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Quizanchos.Domain.Entities.QuizCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FeatureType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuizCategories");
                });

            modelBuilder.Entity("Quizanchos.Domain.Entities.QuizEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuizEntities");
                });

            modelBuilder.Entity("Quizanchos.Domain.Entities.SingleGameSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CardsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentCardIndex")
                        .HasColumnType("int");

                    b.Property<int>("GameLevel")
                        .HasColumnType("int");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTerminatedByTime")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuizCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SecondsPerCard")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("QuizCategoryId");

                    b.ToTable("SingleGameSessions");
                });

            modelBuilder.Entity("Quizanchos.Domain.Entities.FeatureFloat", b =>
                {
                    b.HasBaseType("Quizanchos.Domain.Entities.Abstractions.FeatureAbstract");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasDiscriminator().HasValue("FeatureFloat");
                });

            modelBuilder.Entity("Quizanchos.Domain.Entities.FeatureInt", b =>
                {
                    b.HasBaseType("Quizanchos.Domain.Entities.Abstractions.FeatureAbstract");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.ToTable("FeatureAbstract", t =>
                        {
                            t.Property("Value")
                                .HasColumnName("FeatureInt_Value");
                        });

                    b.HasDiscriminator().HasValue("FeatureInt");
                });

            modelBuilder.Entity("Quizanchos.Domain.Entities.QuizCardFloat", b =>
                {
                    b.HasBaseType("Quizanchos.Domain.Entities.Abstractions.QuizCardAbstract");

                    b.Property<Guid?>("Option1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Option2Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("Option1Id");

                    b.HasIndex("Option2Id");

                    b.HasDiscriminator().HasValue("QuizCardFloat");
                });

            modelBuilder.Entity("Quizanchos.Domain.Entities.QuizCardInt", b =>
                {
                    b.HasBaseType("Quizanchos.Domain.Entities.Abstractions.QuizCardAbstract");

                    b.Property<Guid?>("Option1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Option2Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("Option1Id");

                    b.HasIndex("Option2Id");

                    b.ToTable("QuizCardAbstract", t =>
                        {
                            t.Property("Option1Id")
                                .HasColumnName("QuizCardInt_Option1Id");

                            t.Property("Option2Id")
                                .HasColumnName("QuizCardInt_Option2Id");
                        });

                    b.HasDiscriminator().HasValue("QuizCardInt");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Quizanchos.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Quizanchos.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quizanchos.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Quizanchos.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quizanchos.Domain.Entities.Abstractions.FeatureAbstract", b =>
                {
                    b.HasOne("Quizanchos.Domain.Entities.QuizCategory", "QuizCategory")
                        .WithMany()
                        .HasForeignKey("QuizCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quizanchos.Domain.Entities.QuizEntity", "QuizEntity")
                        .WithMany()
                        .HasForeignKey("QuizEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizCategory");

                    b.Navigation("QuizEntity");
                });

            modelBuilder.Entity("Quizanchos.Domain.Entities.Abstractions.QuizCardAbstract", b =>
                {
                    b.HasOne("Quizanchos.Domain.Entities.SingleGameSession", "SingleGameSession")
                        .WithMany()
                        .HasForeignKey("SingleGameSessionId");

                    b.Navigation("SingleGameSession");
                });

            modelBuilder.Entity("Quizanchos.Domain.Entities.SingleGameSession", b =>
                {
                    b.HasOne("Quizanchos.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quizanchos.Domain.Entities.QuizCategory", "QuizCategory")
                        .WithMany()
                        .HasForeignKey("QuizCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("QuizCategory");
                });

            modelBuilder.Entity("Quizanchos.Domain.Entities.QuizCardFloat", b =>
                {
                    b.HasOne("Quizanchos.Domain.Entities.FeatureFloat", "Option1")
                        .WithMany()
                        .HasForeignKey("Option1Id");

                    b.HasOne("Quizanchos.Domain.Entities.FeatureFloat", "Option2")
                        .WithMany()
                        .HasForeignKey("Option2Id");

                    b.Navigation("Option1");

                    b.Navigation("Option2");
                });

            modelBuilder.Entity("Quizanchos.Domain.Entities.QuizCardInt", b =>
                {
                    b.HasOne("Quizanchos.Domain.Entities.FeatureInt", "Option1")
                        .WithMany()
                        .HasForeignKey("Option1Id");

                    b.HasOne("Quizanchos.Domain.Entities.FeatureInt", "Option2")
                        .WithMany()
                        .HasForeignKey("Option2Id");

                    b.Navigation("Option1");

                    b.Navigation("Option2");
                });
#pragma warning restore 612, 618
        }
    }
}
